/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 80012
Source Host           : localhost:3306
Source Database       : blog

Target Server Type    : MYSQL
Target Server Version : 80012
File Encoding         : 65001

Date: 2018-08-02 16:15:04
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `article_table`
-- ----------------------------
DROP TABLE IF EXISTS `article_table`;
CREATE TABLE `article_table` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `author` varchar(16) NOT NULL,
  `author_src` varchar(64) NOT NULL,
  `title` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `post_time` int(11) NOT NULL,
  `content` text NOT NULL,
  `summary` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `n_like` int(11) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article_table
-- ----------------------------
INSERT INTO `article_table` VALUES ('1', 'blue', 'img/headimg.png', '基于HTML5 的互联网+地铁行业新模式', '1533141120', '近几年，互联网与交通运输的融合，改变了交易模式，影响着运输组织和经营方式，改变了运输主体的市场结构、模糊了运营与非营运的界限，也更好的实现了交通资源的集约共享，同时使得更多依靠外力和企业推动交通信息化成为可能。互联网交通具有巨大的潜力、发展迅速、生态浩大，需要政府顺势而为，紧跟发展态势，加强引导、转变职能、创新政府管理与市场监管的模式。而城市轨道交通的投资体量巨大，一条线路动辄上百亿元，如何保证投资效益、提升投资管理工作的精确性和可控性是当务之急。应引入“互联网+”思维，研发基于“互联网+”的城市轨道交通系统。在分析现有投资管理存在问题基础上，这里对该系统的应用特点及主要功能进行了深入阐述，旨在完善提高系统的功能分布和用户体验。\r\n\r\n图片描述\r\n\r\nhttp://www.hightopo.com/demo/...\r\n\r\n代码实现\r\n场景搭建\r\n我们先来搭建基础场景，因为这个场景是在 2D 的基础上实现的，因此我们需要用拓扑组件 ht.graph.GraphView 来搭建基础场景：\r\n\r\ndataModel = new ht.DataModel();// 数据容器，用来存储数据节点\r\ngraphView = new ht.graph.GraphView(dataModel);// 拓扑组件\r\ngraphView.addToDOM();// 将拓扑组件添加到 body 体中\r\n上面代码中出现的 addToDOM 方法将组建添加到 DOM 的 body 中，HT（https://hightopo.com）的组件一般都会嵌入 BorderPane、SplitView 和 TabView 等（均为 HT 的组件）容器中使用，而最外层的 HT 组件则需要用户手工将 getView() 返回的底层 div 元素添加到页面的 DOM 元素中，这里需要注意的是，当父容器大小变化时，如果父容器是 BorderPane 和 SplitView 等这些 HT 预定义的容器组件，则 HT 的容器会自动递归调用孩子组件 invalidate 函数通知更新。但如果父容器是原生的 html 元素， 则 HT 组件无法获知需要更新，因此最外层的 HT 组件一般需要监听 window 的窗口大小变化事件，调用最外层组件 invalidate 函数进行更新。\r\n\r\n为了最外层组件加载填充满窗口的方便性，HT 的所有组件都有 addToDOM 函数，其实现逻辑如下，其中 iv 是 invalidate 的简写：\r\n\r\naddToDOM = function(){\r\n    var self = this,\r\n        view = self.getView(),// 获取组件的底层 div\r\n        style = view.style;\r\n    document.body.appendChild(view);// 将组件底层div添加进body中\r\n    style.left = \'0\';// ht 默认将所有的组件的position都设置为absolute绝对定位\r\n    style.right = \'0\';\r\n    style.top = \'0\';\r\n    style.bottom = \'0\';\r\n    window.addEventListener(\'resize\', function () { self.iv(); }, false);// 窗口大小改变事件，调用刷新函数\r\n}\r\n场景导入\r\n在 HT 中，常用的一种方法将场景导入到内部就是靠解析 JSON 文件，用 JSON 文件来搭建场景的好处之一就是可以循环利用，我们今天的场景就是利用 JSON 画出来的。接下来 HT 将利用  ht.Default.xhrLoad 函数载入 JSON 场景，并用 HT 封装的 DataModel.deserialize(json) 来反序列化（http://hightopo.com/guide/gui...），并将反序列化的对象加入 DataModel：\r\n\r\nht.Default.xhrLoad(\'demo2.json\', function(text) {\r\n    var json = ht.Default.parse(text);\r\n    if(json.title) document.title = json.title;//将 JSON 文件中的 titile 赋给全局变量 titile \r\n    dataModel.deserialize(json);//反序列化\r\n    graphView.fitContent(true);//缩放平移拓扑以展示所有图元，即让所有的元素都显示出来\r\n});\r\n在 HT 中，Data 类型对象构造时内部会自动被赋予一个 id 属性，可通过 data.getId() 和 data.setId(id) 获取和设置，Data 对象添加到 DataModel 之后不允许修改 id 值，可通过 dataModel.getDataById(id) 快速查找 Data 对象。但是一般建议 id 属性由 HT 自动分配，用户业务意义的唯一标示可存在 tag 属性上，通过 Data#setTag(tag) 函数允许任意动态改变 tag 值，通过DataModel#getDataByTag(tag) 可查找到对应的 Data 对象，并支持通过 DataModel#removeDataByTag(tag) 删除 Data 对象。我们这边通过在 JSON 中设置 Data 对象的 tag 属性，在代码中通过 dataModel.getDataByTag(tag) 函数来获取该 Data 对象：\r\n\r\n{\r\n    \"c\": \"ht.Block\",\r\n    \"i\": 3849,\r\n    \"p\": {\r\n        \"displayName\": \"通风1\",\r\n        \"tag\": \"fan1\",\r\n        \"position\": {\r\n            \"x\": 491.24174,\r\n            \"y\": 320.88985\r\n        },\r\n        \"width\": 62,\r\n        \"height\": 62\r\n    }\r\n}\r\nvar fan1 = dataModel.getDataByTag(\'fan1\');\r\nvar fan2 = dataModel.getDataByTag(\'fan2\');\r\nvar camera1 = dataModel.getDataByTag(\'camera1\');\r\nvar camera2 = dataModel.getDataByTag(\'camera2\');\r\nvar camera3 = dataModel.getDataByTag(\'camera3\');\r\nvar redAlarm = dataModel.getDataByTag(\'redAlarm\');\r\nvar yellowAlarm = dataModel.getDataByTag(\'yellowAlarm\');\r\n我在下图中做了各标签对应的元素：\r\n\r\n图片描述\r\n\r\n动画\r\n接着我们对需要旋转、闪烁的对象进行设置，HT 中对“旋转”封装了 setRotation(rotation) 函数，通过获得对象当前的旋转角度，在这个角度的基础上再增加某个弧度，通过 setInterval 定时调用，这样就能在一定的时间间隔内旋转相同的弧度：\r\n\r\nsetInterval(function(){\r\n    var time = new Date().getTime();\r\n    var deltaTime = time - lastTime;\r\n    var deltaRotation = deltaTime * Math.PI / 180 * 0.1;\r\n    lastTime = time;\r\n\r\n    fan1.setRotation(fan1.getRotation() + deltaRotation*3);\r\n    fan2.setRotation(fan2.getRotation() + deltaRotation*3);\r\n    camera1.setRotation(camera1.getRotation() + deltaRotation/3);\r\n    camera2.setRotation(camera2.getRotation() + deltaRotation/3);\r\n    camera3.setRotation(camera3.getRotation() + deltaRotation/3);\r\n\r\n    if (time - stairTime > 500) {\r\n        stairIndex--;\r\n        if (stairIndex < 0) {\r\n            stairIndex = 8;\r\n        }\r\n        stairTime = time;\r\n    }\r\n\r\n    for (var i = 0; i < 8; i++) {// 因为有一些相似的元素我们设置的 tag 名类似，只是在后面换成了1、2、3，所以我们通过 for 循环来获取\r\n        var color = stairIndex === i ? \'#F6A623\' : \'#CFCFCF\';\r\n        dataModel.getDataByTag(\'stair_1_\' + i).s(\'shape.border.color\', color);\r\n        dataModel.getDataByTag(\'stair_2_\' + i).s(\'shape.border.color\', color);\r\n    }\r\n\r\n    if (new Date().getSeconds() % 2 === 1) {\r\n        yellowAlarm.s(\'shape.background\', null);\r\n        redAlarm.s(\'shape.background\', null);\r\n    }\r\n    else {\r\n        yellowAlarm.s(\'shape.background\', \'yellow\');\r\n        redAlarm.s(\'shape.background\', \'red\');\r\n    }\r\n}, 5);\r\n当然还是可以通过 HT 封装的动画进行操作，不过这里不一次性投食太多，有兴趣的可以看看我发布的 https://www.cnblogs.com/xhloa... 等其它文章。\r\n\r\nHT 还封装了 setStyle 函数用来设置样式，可简写为 s，具体样式请参考 HT for Web 样式手册（http://hightopo.com/guide/gui...）：\r\n\r\nfor (var i = 0; i < 8; i++) {// 因为有一些相似的元素我们设置的 tag 名类似，只是在后面换成了1、2、3，所以我们通过 for 循环来获取\r\n    var color = stairIndex === i ? \'#F6A623\' : \'#CFCFCF\';\r\n    dataModel.getDataByTag(\'stair_1_\' + i).s(\'shape.border.color\', color);\r\n    dataModel.getDataByTag(\'stair_2_\' + i).s(\'shape.border.color\', color);\r\n}\r\n我们还对“警告灯”的闪烁进行了定时控制，如果是偶数秒的时候，就将灯的背景颜色设置为“无色”，否则，如果是 yellowAlarm 则设置为“黄色”，如果是 redAlarm 则设置为“红色”：\r\n\r\nif (new Date().getSeconds() % 2 === 1) {\r\n    yellowAlarm.s(\'shape.background\', null);\r\n    redAlarm.s(\'shape.background\', null);\r\n}\r\nelse {\r\n    yellowAlarm.s(\'shape.background\', \'yellow\');\r\n    redAlarm.s(\'shape.background\', \'red\');\r\n}\r\n总结\r\n2015 年 3 月，李克强总理在政府工作报告中首次提出“互联网+”行动计划。之后，国务院印发《关于积极推进“互联网+”行动的指导意见》，推动互联网由消费领域向生产领域拓展，从而进一步提升产业发展水平，增强行业创新能力。在此“互联网+”的背景之下，城市轨道交通行业应当紧跟时代潮流，将“互联网+”思维引入工程投资管理之中，研发一种基于“互联网+”的城市轨道交通工程投资管理系统，从而提升造价管理系统的功能分布和用户体验。“互联网+”通过行业跨界，寻找互联网与城市轨道交通工程的相关性，将传统行业的数据进行信息化处理，将原本有限的数据进行提升、分析和流转，利于“互联网+”的乘数效应，显著提升工程投资管理中数据的实时动态和完整精确。', '近几年，互联网与交通运输的融合，改变了交易模式，影响着运输组织和经营方式，改变了运输主体的市场结构、模糊了运营与非营运的界限，也更好的实现了交通资源的集约共享', '10');
INSERT INTO `article_table` VALUES ('2', '腾讯云加社区', 'img/headimg.png', 'MySQL在删除表时I/O错误原因分析', '1533141487', '问题现象\r\n最近使用sysbench测试MySQL，由于测试时间较长，写了一个脚本按prepare->run->cleanup的顺序在后台跑着。跑完后察看日志发现一个问题，MySQL服务的错误日志中出现多条类似以下信息的报错：\r\n\r\n[ERROR] InnoDB: Trying to do I/O to a tablespace which does not exist. I/O type: read, page: [page id: space=32, page number=57890], I/O length: 16384 bytes。\r\n看起来是I/O出现了错误，但MySQL进程并未崩溃，sysbench客户端也没有报错。\r\n\r\n发现问题过程\r\n根据报错的时间记录以及脚本输出的各个阶段的时间点对比，确定了当时脚本正在执行的命令为：\r\n\r\nsysbench --tables=100 --table-size=4000000 --threads=50 --mysql-db=sbtest --time=300 oltp_delete cleanup\r\n重新手动执行一遍这个用例，却没有再出现同样的情况。但是用脚本执行却依然能够发现这个错误信息。初步怀疑是run和cleanup之间不能间隔太久才会触发这个问题。由于执行一遍100G数据量的时间较长，重现代价较大，先尝试缩减用例数据量。将—table-size=4000000修改为2000000，此时执行脚本，又不会触发这个问题了，最后将—table-size=3000000可以稳定触发又能减少部分重现时间。为了确认是否间隔太长会导致不能复现，修改脚本在run和cleanup两个阶段之间sleep 10秒，果然不会触发这个错误信息。修改为sleep 5秒则还能触发，不过报错条数已有所减少。\r\n\r\n问题调查\r\n察看对应版本mysql5.7.22的代码，发现这个报错只有一个位置：fil0fil.cc文件的第5578行fil_io()函数内。 直接使用gdb调试，在这个位置加上断点，并执行可复现的脚本，得到以下堆栈：\r\n\r\n(gdb) bt\r\n#0  fil_io (type=..., sync=sync@entry=false, page_id=..., page_size=..., byte_offset=byte_offset@entry=0, len=16384, buf=0x7f9ead544000, message=message@entry=0x7f9ea8ce9c78) at mysql-5.7.22/storage/innobase/fil/fil0fil.cc:5580\r\n#1  0x00000000010f99fa in buf_read_page_low (err=0x7f9ddaffc72c, sync=<optimized out>, type=0, mode=<optimized out>, page_id=..., page_size=..., unzip=true) at mysql-5.7.22/storage/innobase/buf/buf0rea.cc:195\r\n#2  0x00000000010fc5fa in buf_read_ibuf_merge_pages (sync=sync@entry=false, space_ids=space_ids@entry=0x7f9ddaffc7e0, page_nos=page_nos@entry=0x7f9ddaffc7a0, n_stored=2) at mysql-5.7.22/storage/innobase/buf/buf0rea.cc:834\r\n#3  0x0000000000f3a86c in ibuf_merge_pages (n_pages=n_pages@entry=0x7f9ddaffce30, sync=sync@entry=false) at mysql-5.7.22/storage/innobase/ibuf/ibuf0ibuf.cc:2552\r\n#4  0x0000000000f3a94a in ibuf_merge (sync=false, sync=false, n_pages=0x7f9ddaffce30) at mysql-5.7.22/storage/innobase/ibuf/ibuf0ibuf.cc:2656\r\n#5  ibuf_merge_in_background (full=full@entry=false) at mysql-5.7.22/storage/innobase/ibuf/ibuf0ibuf.cc:2721\r\n#6  0x000000000102bcf4 in srv_master_do_active_tasks () at mysql-5.7.22/storage/innobase/srv/srv0srv.cc:2132\r\n#7  srv_master_thread (arg=<optimized out>) at mysql-5.7.22/storage/innobase/srv/srv0srv.cc:2383\r\n#8  0x00007fa003eeddc5 in start_thread () from /lib64/libpthread.so.0\r\n#9  0x00007fa002aab74d in clone () from /lib64/libc.so.6\r\n很明显这是后台线程在做insert buffer merge操作。此时发现space->stop_new_ops为true，也就是要处理的页面所属的space正在被删除。为什么会去操作正在被删除的space呢？这需要调查下insert buffer功能、insert buffer merge的流程以及删除表的流程。\r\n\r\ninsert buffer背景知识\r\ninsert buffer是一种特殊的数据结构（B+ tree），当辅助索引页面不在缓冲池中时，它会将更改缓存起来，稍后在页面被其他读取操作加载到缓冲池中时合并。MySQL最初引进这个功能的时候只能缓存insert操作，所以叫做insert buffer，现在这些操作可以是 INSERT, UPDATE, or DELETE(DML)，所以改叫做change buffer了（本文依然以insert buffer描述），但源码中依然以ibuf作为标识。这个功能把若干对同一页面的更新缓存起来，合并为一次性更新操作，减少了IO，并转化随机IO为顺序IO,这样可以避免随机IO带来性能损耗，提高数据库的写性能。\r\n\r\n相关insert buffer merge逻辑\r\n当buffer page读入buffer pool时，就会进行insert buffer merge。主要有几个场景会出现merge过程：\r\n\r\n当页面被读入缓冲池时，读取完成后先进行ibuf的merge，然后页面才可用；\r\nmerge操作作为后台任务执行。 innodb_io_capacity参数可设置InnoDB后台任务每次merge过程的页面数上限；\r\n在崩溃恢复期间，当索引页被读入缓冲池时，将执行对应页的insert buffer merge；\r\ninsert buffer具有持久性，系统崩溃不会导致它失效。重启后，insert buffer merge操作将恢复正常；\r\n服务器关闭时可使用—innodb-fast-shutdown = 0强制进行ibuf的完全合并。\r\n我们这次的问题很明显属于第二种情况。innodb主线程(svr_master_thread）会每隔一秒主动进行一次insert buffer的merge操作。先判断过去1s之内服务器是否发生过活动（插入元组到页面、undo表上的行操作等），如果发生过，则merge的最大页面数为innodb_io_capacity设定的5%。如果没有则merge的最大页面数为innodb_io_capacity设定的值。\r\n\r\ninnodb主线程(svr_master_thread）merge的主流程如下：\r\n\r\n主线程从ibuf树的叶子节点读取页号和space号，并记录到一个二元数组中（未加锁）；\r\n主线程对二元组中space进行检测是否在表空间缓存中，如不在，说明已经被删除了，删除对应ibuf的记录；\r\n主线程判断是否对一个正在删除的space进行异步读取操作，如果是，报错，并删除对应ibuf的记录，转到过程2继续下一个数组元素的判断；\r\n如果一切判断正常，主线程发出async io请求，async读取需要被merge的索引页面；\r\nI/O handler 线程，在接受到完成的async I/O之后，进行merge操作；\r\n进行merge的时候调用fil_space_acquire对space->n_pending_ops进行自增。避免删除操作并发；\r\n执行完毕后调用fil_space_release对space->n_pending_ops进行自减。\r\n相关删除表的逻辑\r\n对fil_system->mutex加锁，设置sp->stop_new_ops = true，标记space正在删除，不允许对它进行新操作，然后对fil_system->mutex解锁；\r\n对fil_system->mutex加锁，检测space->n_pending_ops，对fil_system->mutex解锁。如果检测到大于0，意味着还有依赖的操作未完成，睡眠20ms后重试；\r\n对fil_system->mutex加锁，检测space->n_pending_flushes和(*node)->n_pending ，对fil_system->mutex解锁。如果检测到大于0，意味着还有依赖的I/O未完成，睡眠20ms后重试；\r\n此时认为已经没有冲突的操作了，刷出所有脏页面或删除所有给定的表空间的页面；\r\n从表空间缓存删除指定space的记录；\r\n删除对应数据文件。\r\n问题结论\r\n情况很明确了，主线程获取ibuf的（space，page）的过程与删除操作执行的过程并没有锁保证互斥，只有async I/O完成之后的merge操作与删除操作才有互斥。如果后台线程开始ibuf merge并已经执行过了第2步的检测，但还没有执行到第3步检测，此时用户线程开始做删除表的操作，并设置好stop_new_ops标记但还没有执行到第5步删除表空间缓存，就会出现这个错误信息。两线程的交互如下图所示：\r\n\r\nimg\r\n\r\n不出意外的话，在打中断点时必然有线程在执行对应表的删除操作。果然我们可以发现如下堆栈：\r\n\r\nThread 118 (Thread 0x7f9de0111700 (LWP 5234)):\r\n#0  0x00007fa003ef1e8e in pthread_cond_broadcast@@GLIBC_2.3.2 () from /lib64/libpthread.so.0\r\n#1  0x0000000000f82f41 in broadcast (this=0xd452ef8) at mysql-5.7.22/storage/innobase/os/os0event.cc:184\r\n#2  set (this=0xd452ef8) at mysql-5.7.22/storage/innobase/os/os0event.cc:75\r\n#3  os_event_set (event=0xd452ef8) at mysql-5.7.22/storage/innobase/os/os0event.cc:483\r\n#4  0x00000000010ec8a4 in signal (this=<optimized out>) at mysql-5.7.22/storage/innobase/include/ut0mutex.ic:105\r\n#5  exit (this=<optimized out>) at mysql-5.7.22/storage/innobase/include/ib0mutex.h:690\r\n#6  exit (this=<optimized out>) at mysql-5.7.22/storage/innobase/include/ib0mutex.h:961\r\n#7  buf_flush_yield (bpage=<optimized out>, buf_pool=<optimized out>) at mysql-5.7.22/storage/innobase/buf/buf0lru.cc:405\r\n#8  buf_flush_try_yield (processed=<optimized out>, bpage=<optimized out>, buf_pool=<optimized out>) at mysql-5.7.22/storage/innobase/buf/buf0lru.cc:449\r\n#9  buf_flush_or_remove_pages (trx=<optimized out>, flush=<optimized out>, observer=<optimized out>, id=<optimized out>, buf_pool=<optimized out>) at mysql-5.7.22/storage/innobase/buf/buf0lru.cc:632\r\n#10 buf_flush_dirty_pages (buf_pool=<optimized out>, id=<optimized out>, observer=<optimized out>, flush=<optimized out>, trx=<optimized out>) at mysql-5.7.22/storage/innobase/buf/buf0lru.cc:693\r\n#11 0x00000000010f6de7 in buf_LRU_remove_pages (trx=0x0, buf_remove=BUF_REMOVE_FLUSH_NO_WRITE, id=55, buf_pool=0x31e55e8) at mysql-5.7.22/storage/innobase/buf/buf0lru.cc:893\r\n#12 buf_LRU_flush_or_remove_pages (id=id@entry=55, buf_remove=buf_remove@entry=BUF_REMOVE_FLUSH_NO_WRITE, trx=trx@entry=0x0) at mysql-5.7.22/storage/innobase/buf/buf0lru.cc:951\r\n#13 0x000000000114e488 in fil_delete_tablespace (id=id@entry=55, buf_remove=buf_remove@entry=BUF_REMOVE_FLUSH_NO_WRITE) at mysql-5.7.22/storage/innobase/fil/fil0fil.cc:2800\r\n#14 0x0000000000fe77bd in row_drop_single_table_tablespace (trx=0x0, is_encrypted=false, is_temp=false, filepath=0x7f9d7c209f38 \"./sbtest/sbtest25.ibd\", tablename=0x7f9d7c209dc8 \"sbtest/sbtest25\", space_id=55) at mysql-5.7.22/storage/innobase/row/row0mysql.cc:4189\r\n#15 row_drop_table_for_mysql (name=name@entry=0x7f9de010e020 \"sbtest/sbtest25\", trx=trx@entry=0x7f9ff9515750, drop_db=<optimized out>, nonatomic=<optimized out>, nonatomic@entry=true, handler=handler@entry=0x0) at mysql-5.7.22/storage/innobase/row/row0mysql.cc:4741\r\n#16 0x0000000000f092f3 in ha_innobase::delete_table (this=<optimized out>, name=0x7f9de010f5e0 \"./sbtest/sbtest25\") at mysql-5.7.22/storage/innobase/handler/ha_innodb.cc:12539\r\n#17 0x0000000000801a30 in ha_delete_table (thd=thd@entry=0x7f9d7c1f6910, table_type=table_type@entry=0x2ebd100, path=path@entry=0x7f9de010f5e0 \"./sbtest/sbtest25\", db=db@entry=0x7f9d7c00e560 \"sbtest\", alias=0x7f9d7c00df98 \"sbtest25\", generate_warning=generate_warning@entry=true) at mysql-5.7.22/sql/handler.cc:2586\r\n#18 0x0000000000d0a6af in mysql_rm_table_no_locks (thd=thd@entry=0x7f9d7c1f6910, tables=tables@entry=0x7f9d7c00dfe0, if_exists=true, drop_temporary=false, drop_view=drop_view@entry=false, dont_log_query=dont_log_query@entry=false) at mysql-5.7.22/sql/sql_table.cc:2546\r\n#19 0x0000000000d0ba58 in mysql_rm_table (thd=thd@entry=0x7f9d7c1f6910, tables=tables@entry=0x7f9d7c00dfe0, if_exists=<optimized out>, drop_temporary=<optimized out>) at mysql-5.7.22/sql/sql_table.cc:2196\r\n#20 0x0000000000c9d90b in mysql_execute_command (thd=thd@entry=0x7f9d7c1f6910, first_level=first_level@entry=true) at mysql-5.7.22/sql/sql_parse.cc:3589\r\n#21 0x0000000000ca1edd in mysql_parse (thd=thd@entry=0x7f9d7c1f6910, parser_state=parser_state@entry=0x7f9de01107a0) at mysql-5.7.22/sql/sql_parse.cc:5582\r\n#22 0x0000000000ca2a20 in dispatch_command (thd=thd@entry=0x7f9d7c1f6910, com_data=com_data@entry=0x7f9de0110e00, command=COM_QUERY) at mysql-5.7.22/sql/sql_parse.cc:1458\r\n#23 0x0000000000ca4377 in do_command (thd=thd@entry=0x7f9d7c1f6910) at mysql-5.7.22/sql/sql_parse.cc:999\r\n#24 0x0000000000d5ed00 in handle_connection (arg=arg@entry=0x10b8e910) at mysql-5.7.22/sql/conn_handler/connection_handler_per_thread.cc:300\r\n#25 0x0000000001223d74 in pfs_spawn_thread (arg=0x10c48f40) at mysql-5.7.22/storage/perfschema/pfs.cc:2190\r\n#26 0x00007fa003eeddc5 in start_thread () from /lib64/libpthread.so.0\r\n#27 0x00007fa002aab74d in clone () from /lib64/libc.so.6\r\n解决办法\r\n为buf_read_ibuf_merge_pages、buf_read_page_low、fil_io新增一个参数ignore_missing_space。表示忽略正在删除的space，默认为false，当ibuf_merge_pages调用的时候置为true。在fil_io报错处额外判断该参数是否为true，是则不报错，继续其他流程。\r\n\r\n或者直接在buf_read_ibuf_merge_pages调用buf_read_page_low时传入IORequest::IGNORE_MISSING参数。\r\n\r\n具体代码参考MariaDB commit：8edbb1117a9e1fd81fbd08b8f1d06c72efe38f44\r\n\r\n影响版本\r\n察看相关信息，这个问题是修改Bug#19710564时删除表空间版本引入的。\r\n\r\nMySQL Community Server 5.7.6引入，版本5.7.22尚未修复，版本8.0.0已修复。\r\nMariaDB Server 10.2受影响。MariaDB Server 10.2.9, 10.3.2已修复\r\n优化建议\r\n可优化一下性能：在buf_read_ibuf_merge_pages中记录下出错的space id，循环的时候判断下一个page的space id，如果space id是相同的，直接删除对应ibuf的记录（当前分配的最大space id记录在系统表空间，space id占4个字节，低于0xFFFFFFF0UL，分配时读取系统表空间保存的值，然后加一，具有唯一性）。\r\n\r\n', '最近使用sysbench测试MySQL，由于测试时间较长，写了一个脚本按prepare->run->cleanup的顺序在后台跑着。跑完后察看日志发现一个问题，MySQL服务的错误日志中', '1');

-- ----------------------------
-- Table structure for `banner_table`
-- ----------------------------
DROP TABLE IF EXISTS `banner_table`;
CREATE TABLE `banner_table` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(32) NOT NULL,
  `sub_title` varchar(16) NOT NULL,
  `src` varchar(64) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of banner_table
-- ----------------------------
INSERT INTO `banner_table` VALUES ('1', '海边的风景', '黄色的', 'images/1.jpg');
INSERT INTO `banner_table` VALUES ('2', '也是海边的风景', '蓝色的', 'images/2.jpg');
INSERT INTO `banner_table` VALUES ('3', '河边的风景', '黑色的', 'images/3.jpg');

-- ----------------------------
-- Table structure for `user_table`
-- ----------------------------
DROP TABLE IF EXISTS `user_table`;
CREATE TABLE `user_table` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(32) NOT NULL,
  `password` varchar(32) NOT NULL,
  `src` varchar(64) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user_table
-- ----------------------------
